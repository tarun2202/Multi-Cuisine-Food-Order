package com.app.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.dao.AddressDao;
import com.app.dao.CustomerDao;
import com.app.dao.DishDao;
import com.app.dao.OrderDao;
import com.app.dao.OrderItemDao;
import com.app.dao.VendorDao;
import com.app.dto.DeliveryDTO;
import com.app.dto.DishDTO;
import com.app.dto.LoginDTO;
import com.app.dto.deliveryDTO;
import com.app.entities.Customers;
import com.app.entities.Dish;
import com.app.entities.OrderItems;
import com.app.entities.Orders;
import com.app.entities.Status;
import com.app.entities.Vendors;

@Service
@Transactional
public class VendorServiceImpl implements VendorService {

	@Autowired
	private VendorDao vendorDao;
	
	@Autowired
	private OrderDao orderDao;

	@Autowired
	private ModelMapper mapper;
	
	@Autowired
	private OrderItemDao orderItemsDao;
	
	@Autowired
	private DishDao dishDao;
	
	@Autowired
	private CustomerDao customerDao;
	
	@Autowired
	private AddressDao addreddDao;

	@Override
	public List<DishDTO> getAllDishesByVendorId(Long vendorId) {
		Vendors vendor = vendorDao.findById(vendorId).orElse(null);

		List<Dish> dishes = vendor.getDishes();

		return dishes.stream().map(dish -> mapper.map(dish, DishDTO.class)).collect(Collectors.toList());
	}

	@Override
	public Long validateAndLogin(LoginDTO cred) {
		Vendors vendor = vendorDao.findByVendorEmail(cred.getEmail()).orElseGet(null);
	     if (vendor!= null)
	     {
	    	 if(vendor.getVendorPassword().equals(cred.getPassword()))
	    	 {
	    		return vendor.getId();
	    	 }
	    	 else {
	    		 return 0L;
	    	 }
	     }
	     else
	    	 return -1L;
	}

	@Override
	public DeliveryDTO delivery() {
		List<Orders> orderList = orderDao.findAll();
		
		List<Orders> oList = new ArrayList<Orders>();
		
		for (Orders order : orderList) {
			if(order.getOrderStatus()==Status.ORDERED) {
				oList.add(order);
			}
		}
		
		for (Orders order : oList) {
			List<String> nameList = new ArrayList<String>(); 
			DeliveryDTO delDto = new DeliveryDTO();
			delDto.setOdrerId(order.getId());
			delDto.setTotal(order.getOrderTotal());
			List<OrderItems> listOItems = orderItemsDao.getByOrder(order);
			Customers customer = customerDao.findById(order.getCustomer().getId()).orElse(null);
			delDto.setUserName(customer.getCustomerName());
			delDto.setMobileNo(customer.getCustomerMobileNo());
			String address =
			for (OrderItems item : listOItems) {
				Dish dish = dishDao.findById(item.getDish().getId()).orElse(null);
				nameList.add(dish.getDishName());
			}
		}
		
		
		
		return null;
	}
	

}
