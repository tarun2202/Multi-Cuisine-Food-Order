package com.app.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.app.dao.CustomerDao;
import com.app.dao.DishDao;
import com.app.dao.FavouriteDao;
import com.app.dao.VendorDao;
import com.app.dto.ApiResponseDTO;
import com.app.dto.FavouriteDTO;
import com.app.dto.FavouriteResponseDTO;
import com.app.entities.CartItem;
import com.app.entities.Customers;
import com.app.entities.Dish;
import com.app.entities.Favourites;
import com.app.entities.Vendors;

@Service
@Transactional
public class FavouriteServiceImpl implements FavouriteService {

	@Autowired
	private FavouriteDao favouriteDao;

	@Autowired
	private CustomerDao customerDao;

	@Autowired
	private DishDao dishDao;
	
	@Autowired
	private VendorDao vendorDao;

	@Autowired
	private ModelMapper mapper;

	@Override
	public ApiResponseDTO addFavourite(Long customerId, Long dishId) {

		
		
		 for (CartItem cartItem : list) {
			    if(cartItem.getDish().getId()==dishId)
			    	return new ApiResponseDTO("This dish is already present in your cart");
		}
		
		Customers customer = customerDao.getReferenceById(customerId);

		Dish dish = dishDao.getReferenceById(dishId);

		Favourites favourite = new Favourites();
		favourite.setCustomer(customer);
		favourite.setDish(dish);
		favouriteDao.save(favourite);

		return new ApiResponseDTO("Favourite added succesfully!");
	}

	@Override
	public ApiResponseDTO removeFavourite(Long favouriteId) {

		Favourites favourite = favouriteDao.getReferenceById(favouriteId);
		favourite.setCustomer(null);
		favourite.setDish(null);
		favouriteDao.delete(favourite);

		return new ApiResponseDTO("Favourite removed!");
	}

	
	//custom query i.e jpql not working but native query is working fine but still hibernate seems to fire 4 queries
	@Override
	public List<FavouriteResponseDTO> getAllFavouritesByCustomerId(Long customerId) {
		
		//below approach is firing 4 hibernate queries,need to find efficient aproach by using join or maybe native query
		//Customers customer = customerDao.findById(customerId).orElseThrow();

		List<Favourites> favourites = favouriteDao.findByCustomerId(customerId);
		
		List<FavouriteResponseDTO> favouriteResponseList = new ArrayList<FavouriteResponseDTO>();
		
		for ( Favourites fav : favourites) {
			Dish dish = dishDao.findById(fav.getDish().getId()).orElse(null);
			Vendors vendor = vendorDao.findById(dish.getVendor().getId()).orElse(null);
			String dishName = dish.getDishName();
			String dishImage = dish.getDishImage();
			double discount = dish.getDiscount();
			double unitprice = dish.getPrice();
			String vendName = vendor.getVendorName();
			FavouriteResponseDTO favouriteItemsResponse = new FavouriteResponseDTO(fav.getId(),dishName,dishImage,unitprice,discount,vendName);
			favouriteResponseList.add(favouriteItemsResponse);
		}

		return favouriteResponseList;
	}

}
